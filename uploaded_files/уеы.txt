App.css:
/* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
body {
  background-color: #e6e6e6;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
.app-container {
  max-width: 800px;
  margin: 50px auto;
  padding: 40px;
}

/* –ë–µ–ª–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */
.white-box {
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  padding: 40px;
}

/* –ö–Ω–æ–ø–∫–∏ (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å) */
.button {
  background-color: #a13620;
  color: #fff;
  padding: 12px 25px;
  margin: 15px;
  border: none;
  border-radius: 25px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.button:hover {
  background-color: #7c2917;
}

/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫ */
.button-row {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 30px;
}

/* –ì—Ä—É–ø–ø—ã –≤–≤–æ–¥–∞ */
.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

/* –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é –∏ –≤—ã–ø–∞–¥–∞—à–∫–∞ */
.top-menu {
  position: absolute;
  top: 10px;
  right: 10px;
}

.dropdown {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  margin-top: 10px;
}

.dropdown-item {
  padding: 10px 20px;
  cursor: pointer;
}

.dropdown-item:hover {
  background: #eee;
}

/* –õ–æ–≥–æ—Ç–∏–ø */
.logo {
  max-width: 170px;
  display: block;
  margin: 0 auto 30px auto;
}

/* –§–æ—Ä–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */
.admin-login {
  max-width: 400px;
  margin: 0 auto;
  text-align: center;
}

.admin-login input {
  width: calc(100% - 30px);
  padding: 12px 15px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.admin-login .remember {
  text-align: left;
  margin: 10px 0 20px 0;
}

/* –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ */
.admin-panel table {
  width: 100%;
  border-collapse: collapse;
}

.admin-panel th, .admin-panel td {
  border: 1px solid #ddd;
  padding: 8px;
}

.admin-panel th {
  background-color: #f3f3f3;
  font-weight: bold;
}

/* –î–ª—è —Å—Å—ã–ª–∫–∏ —Å—Ç–∏–ª—å */
.help-link {
  border: none;
  color: #a13620;
  box-shadow: none;
  text-decoration: none;
  background: none;
  outline: none;
  font-size: 14px;
  padding-bottom: 15px;
}

.error {
  border: 1px solid red;
}

.error-message {
  color: red;
  font-size: 0.8em;
  margin-top: 5px;
  display: block;
}

App.js:
import React, { useState, useEffect} from 'react';
import './App.css';

function App() {
  const [role, setRole] = useState(null);
  const [adminLoggedIn, setAdminLoggedIn] = useState(false);
  const [showMenu, setShowMenu] = useState(false);
  const [formData, setFormData] = useState({
    lastName: '',
    firstName: '',
    middleName: '',
    group: '',
    supervisor: '',
    activity: '',
    file: null,
    comment: ''
  });
  const [errors, setErrors] = useState({});
  const [submissions, setSubmissions] = useState([]);

  useEffect(() => {
    fetch("http://localhost:8000/submissions/")
      .then(res => res.json())
      .then(data => setSubmissions(data));
  }, []);

  const handleAdminLogin = (e) => {
    e.preventDefault();
    const login = e.target.login.value;
    const password = e.target.password.value;

    if (login === '1' && password === '1') {
      setAdminLoggedIn(true);
    } else {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: null
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã)
    if (!formData.lastName.trim()) {
      newErrors.lastName = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é';
    } else if (!/^[–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(formData.lastName)) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã)
    if (!formData.firstName.trim()) {
      newErrors.firstName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    } else if (!/^[–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(formData.firstName)) {
      newErrors.firstName = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    if (formData.middleName.trim() && !/^[–ê-–Ø–∞-—è–Å—ë\s-]*$/.test(formData.middleName)) {
      newErrors.middleName = '–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã (—Ñ–æ—Ä–º–∞—Ç –ü–ò–±-1 –∏–ª–∏ 2-–ü–ú–ò–±-1)
    if (!formData.group.trim()) {
      newErrors.group = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã';
    } else if (!/^(\d+-)?[–ê-–Ø–∞-—è–Å—ë]{2,}-?\d+$/.test(formData.group)) {
      newErrors.group = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä: –ü–ò–±-1 –∏–ª–∏ 2-–ü–ú–ò–±-1)';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    if (!formData.supervisor.trim()) {
      newErrors.supervisor = '–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)';
    } else if (!/^[–ê-–Ø–∞-—è–Å—ë]+\s[–ê-–Ø–∞-—è–Å—ë]+(?:\s[–ê-–Ø–∞-—è–Å—ë]+)?$/.test(formData.supervisor)) {
      newErrors.supervisor = '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (!formData.activity.trim()) {
      newErrors.activity = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
    } else if (formData.activity.trim().length < 3) {
      newErrors.activity = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if (!formData.file) {
      newErrors.file = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const isValid = validateForm();
    if (!isValid) {
      console.log("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é");
      return;
    }

    console.log("file in formData:", formData.file);

    const formPayload = new FormData();
    formPayload.append("last_name", formData.lastName);
    formPayload.append("first_name", formData.firstName);
    formPayload.append("middle_name", formData.middleName);
    formPayload.append("group", formData.group);
    formPayload.append("supervisor", formData.supervisor);
    formPayload.append("activity", formData.activity);
    formPayload.append("file", formData.file); // üëà –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    formPayload.append("comment", formData.comment);

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");

    fetch("http://localhost:8000/submit/", {
      method: "POST",
      body: formPayload
    })
      .then(res => {
        if (!res.ok) {
          throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
        return res.json();
      })
      .then(() => {
        alert("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        setFormData({
          lastName: '',
          firstName: '',
          middleName: '',
          group: '',
          supervisor: '',
          activity: '',
          file: null,
          comment: ''
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        fetch("http://localhost:8000/submissions/")
          .then(res => res.json())
          .then(data => setSubmissions(data));
      })
      .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã");
      });
  };

  const topRightMenu = () => (
    <div className="top-menu">
      <button onClick={() => setShowMenu(!showMenu)} className="button">‚ò∞</button>
      {showMenu && (
        <div className="dropdown">
          <div className="dropdown-item">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
          <div className="dropdown-item" onClick={() => {
            setRole(null);
            setAdminLoggedIn(false);
            setShowMenu(false);
          }}>–í—ã—Ö–æ–¥</div>
        </div>
      )}
    </div>
  );

  const renderInitialScreen = () => (
    <div className="white-box">
      <img src="https://eios.spbgasu.ru/wp-content/uploads/2019/04/spbgasu_300.png" alt="Logo" className="logo" />
      <h1 style={{textAlign: 'center'}}>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ö–æ–¥–∞</h1>
      <div className="button-row">
        <button className="button" onClick={() => setRole('admin')}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</button>
        <button className="button" onClick={() => setRole('user')}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</button>
      </div>
    </div>
  );

  const renderUserForm = () => (
    <div className="form-container">
      {topRightMenu()}
      <h2>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</h2>
      <form className="user-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–§–∞–º–∏–ª–∏—è*</label>
          <input 
            name="lastName"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é" 
            value={formData.lastName}
            onChange={handleInputChange}
            className={errors.lastName ? 'error' : ''}
          />
          {errors.lastName && <span className="error-message">{errors.lastName}</span>}
        </div>
        <div className="form-group">
          <label>–ò–º—è*</label>
          <input 
            name="firstName"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" 
            value={formData.firstName}
            onChange={handleInputChange}
            className={errors.firstName ? 'error' : ''}
          />
          {errors.firstName && <span className="error-message">{errors.firstName}</span>}
        </div>
        <div className="form-group">
          <label>–û—Ç—á–µ—Å—Ç–≤–æ</label>
          <input 
            name="middleName"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è)" 
            value={formData.middleName}
            onChange={handleInputChange}
            className={errors.middleName ? 'error' : ''}
          />
          {errors.middleName && <span className="error-message">{errors.middleName}</span>}
        </div>
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã*</label>
          <input 
            name="group"
            placeholder="–ü—Ä–∏–º–µ—Ä: –ü–ò–±-1 –∏–ª–∏ 2-–ü–ú–ò–±-1" 
            value={formData.group}
            onChange={handleInputChange}
            className={errors.group ? 'error' : ''}
          />
          {errors.group && <span className="error-message">{errors.group}</span>}
        </div>
        <div className="form-group">
          <label>–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è*</label>
          <input 
            name="supervisor"
            placeholder="–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" 
            value={formData.supervisor}
            onChange={handleInputChange}
            className={errors.supervisor ? 'error' : ''}
          />
          {errors.supervisor && <span className="error-message">{errors.supervisor}</span>}
        </div>
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ / —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è*</label>
          <input 
            name="activity"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" 
            value={formData.activity}
            onChange={handleInputChange}
            className={errors.activity ? 'error' : ''}
          />
          {errors.activity && <span className="error-message">{errors.activity}</span>}
        </div>
        <div className="form-group">
          <label>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —É—á–∞—Å—Ç–∏–µ*</label>
          <input 
            type="file" 
            onChange={(e) => setFormData({...formData, file: e.target.files[0]})}
            className={errors.file ? 'error' : ''}
          />
          {errors.file && <span className="error-message">{errors.file}</span>}
        </div>
        <div className="form-group">
          <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É</label>
          <textarea 
            name="comment"
            placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            value={formData.comment}
            onChange={handleInputChange}
          ></textarea>
        </div>
        <button className="button" style={{margin: 0}} type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
    </div>
  );

  const renderAdminLogin = () => (
    <div className="admin-login white-box ">
      <img src="https://eios.spbgasu.ru/wp-content/uploads/2019/04/spbgasu_300.png" alt="Logo" className="logo" />
      <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
      <form onSubmit={handleAdminLogin}>
        <input name="login" placeholder="–õ–æ–≥–∏–Ω" />
        <input name="password" type="password" placeholder="–ü–∞—Ä–æ–ª—å" />
      
        <button className="button">–í–æ–π—Ç–∏</button>
        <a href="#!" className="help-link">–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ö–æ–¥–æ–º?</a>
      </form>
      <button onClick={() => setRole(null)} className="help-link">–ù–∞–∑–∞–¥</button>
      <footer>
        <small>2025 ¬© –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (–°–ü–±–ì–ê–°–£)</small>
      </footer>
    </div>
  );

  const renderAdminPanel = () => (
    <div className="admin-panel">
      {topRightMenu()}
      <h2>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
      <div className="white-box">
        <table>
          <thead>
            <tr>
              <th>–§–∞–º–∏–ª–∏—è</th>
              <th>–ò–º—è</th>
              <th>–û—Ç—á–µ—Å—Ç–≤–æ</th>
              <th>–ì—Ä—É–ø–ø–∞</th>
              <th>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</th>
              <th>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
              <th>–§–∞–π–ª</th>
              <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
            </tr>
          </thead>
          <tbody>
            {submissions.map((entry, idx) => (
              <tr key={idx}>
                <td>{entry.last_name}</td>
                <td>{entry.first_name}</td>
                <td>{entry.middle_name}</td>
                <td>{entry.group}</td>
                <td>{entry.supervisor}</td>
                <td>{entry.activity}</td>
                <td>{entry.file_name}</td>
                <td>{entry.comment}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <button className="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>
  );
  
  return (
    <div className="app-container">
      {role === null && renderInitialScreen()}
      {role === 'admin' && !adminLoggedIn && renderAdminLogin()}
      {role === 'admin' && adminLoggedIn && renderAdminPanel()}
      {role === 'user' && renderUserForm()}
    </div>
  );
}

export default App;

main.py:
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from database import SessionLocal, Submission, init_db
import shutil
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app = FastAPI()
init_db() 

# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploaded_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# POST-–∑–∞–ø—Ä–æ—Å: –ø—Ä–∏—ë–º —Ñ–æ—Ä–º—ã
@app.post("/submit/")
async def submit(
    last_name: str = Form(...),
    first_name: str = Form(...),
    middle_name: str = Form(""),
    group: str = Form(...),
    supervisor: str = Form(...),
    activity: str = Form(...),
    file: UploadFile = File(...),
    comment: str = Form("")
):
    file_path = os.path.join(UPLOAD_DIR, file.filename)
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    db = SessionLocal()
    submission = Submission(
        last_name=last_name,
        first_name=first_name,
        middle_name=middle_name,
        group=group,
        supervisor=supervisor,
        activity=activity,
        file_name=file.filename,
        comment=comment
    )
    db.add(submission)
    db.commit()
    db.close()

    return {"status": "ok"}

# GET-–∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
@app.get("/submissions/")
def get_submissions():
    db = SessionLocal()
    all_data = db.query(Submission).all()
    db.close()
    return [
        {
            "last_name": s.last_name,
            "first_name": s.first_name,
            "middle_name": s.middle_name,
            "group": s.group,
            "supervisor": s.supervisor,
            "activity": s.activity,
            "file_name": s.file_name,
            "comment": s.comment
        }
        for s in all_data
    ]

database.py:from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./students.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

class Submission(Base):
    __tablename__ = "students" 
    id = Column(Integer, primary_key=True, index=True)
    last_name = Column(String)
    first_name = Column(String)
    middle_name = Column(String)
    group = Column(String)
    supervisor = Column(String)
    activity = Column(String)
    file_name = Column(String)
    comment = Column(String)

def init_db():
    Base.metadata.create_all(bind=engine)