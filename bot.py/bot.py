import telebot
from telebot import types
import json
import os
import re
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7898905655:AAGAQK6WuK7tY4z1B96NcAPl6Xe35N-wDig')

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
FORMS_FILE = 'forms.json'
ADMINS_FILE = 'admins.json'
PENDING_ADMINS_FILE = 'pending_admins.json'

# ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à ID)
MAIN_ADMIN_ID = 1091927398

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_username(message):
    return f"@{message.from_user.username}" if message.from_user.username else "no_username"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def is_password_strong(password):
    if len(password) < 8:
        return False
    if not re.search(r'[0-9]', password):
        return False
    if not re.search(r'[^A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]', password):
        return False
    return True

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ñ–æ—Ä–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
users = load_data(USERS_FILE)
forms = load_data(FORMS_FILE)
admins = load_data(ADMINS_FILE)
pending_admins = load_data(PENDING_ADMINS_FILE)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
EVENT_STATUSES = [
    "–í–Ω—É—Ç—Ä–∏–≤—É–∑–æ–≤—Å–∫–∏–π",
    "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π",
    "–ì–æ—Ä–æ–¥—Å–∫–æ–π",
    "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π",
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    username = get_username(message)
    
    if user_id in admins:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_form = types.KeyboardButton('üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
        btn_profile = types.KeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        btn_admin = types.KeyboardButton('‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        markup.add(btn_form, btn_profile, btn_admin)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    elif user_id in users:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_form = types.KeyboardButton('üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
        btn_profile = types.KeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        btn_admin = types.KeyboardButton('üîí –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        markup.add(btn_form, btn_profile, btn_admin)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        user_states[user_id] = {
            'state': 'register_login',
            'username': username
        }
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    text = message.text
    
    if user_id in user_states:
        state = user_states[user_id]['state']
        
        if state == 'admin_fio':
            text = ' '.join(word.capitalize() for word in text.lower().split())
            
            if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$', text):
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á':")
                return
                
            user_states[user_id]['admin_data'] = {
                'fio': text,
                'username': get_username(message)
            }
            user_states[user_id]['state'] = 'admin_login'
            bot.send_message(chat_id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):")
        
        elif state == 'admin_login':
            if len(text) < 4:
                bot.send_message(chat_id, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if any(user['login'] == text for user in users.values()):
                bot.send_message(chat_id, "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
                return
            if any(admin['login'] == text for admin in admins.values()):
                bot.send_message(chat_id, "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
                return
                
            user_states[user_id]['admin_data']['login'] = text
            user_states[user_id]['state'] = 'admin_password'
            bot.send_message(chat_id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã):")
        
        elif state == 'admin_password':
            if not is_password_strong(text):
                bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n- –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n- —Ü–∏—Ñ—Ä—ã\n- —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
                
            user_states[user_id]['admin_data']['password'] = text
            user_states[user_id]['admin_data']['user_id'] = user_id
            
            admin_data = user_states[user_id]['admin_data']
            markup = types.InlineKeyboardMarkup()
            btn_approve = types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_admin_{user_id}")
            btn_reject = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_admin_{user_id}")
            markup.add(btn_approve, btn_reject)
            
            bot.send_message(
                MAIN_ADMIN_ID,
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
                f"üë§ –§–ò–û: {admin_data['fio']}\n"
                f"üÜî ID: {user_id}\n"
                f"üì± Username: {admin_data['username']}\n"
                f"üîë –õ–æ–≥–∏–Ω: {admin_data['login']}\n"
                f"üîí –ü–∞—Ä–æ–ª—å: {admin_data['password']}\n\n"
                f"–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É?",
                reply_markup=markup
            )
            
            pending_admins[user_id] = admin_data
            save_data(pending_admins, PENDING_ADMINS_FILE)
            
            del user_states[user_id]
            
            bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        
        elif state == 'register_login':
            if len(text) < 4:
                bot.send_message(chat_id, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if any(user['login'] == text for user in users.values()):
                bot.send_message(chat_id, "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
                return
                
            user_states[user_id]['login'] = text
            user_states[user_id]['state'] = 'register_password'
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
        
        elif state == 'register_password':
            if len(text) < 6:
                bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
                
            user_states[user_id]['password'] = text
            users[user_id] = {
                'login': user_states[user_id]['login'],
                'password': user_states[user_id]['password'],
                'username': user_states[user_id].get('username', 'no_username')
            }
            save_data(users, USERS_FILE)
            
            del user_states[user_id]
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_form = types.KeyboardButton('üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
            btn_profile = types.KeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
            btn_admin = types.KeyboardButton('üîí –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            markup.add(btn_form, btn_profile, btn_admin)
            
            bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=markup)
        
        elif state == 'form_last_name':
            if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+$', text):
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
                return
                
            user_states[user_id]['form_data'] = {
                'last_name': text,
                'username': users.get(user_id, {}).get('username', 'no_username')
            }
            user_states[user_id]['state'] = 'form_first_name'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è*:")
        
        elif state == 'form_first_name':
            if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+$', text):
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
                return
                
            user_states[user_id]['form_data']['first_name'] = text
            user_states[user_id]['state'] = 'form_middle_name'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç):")
        
        elif state == 'form_middle_name':
            if text != '-':
                if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+$', text):
                    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç:")
                    return
                user_states[user_id]['form_data']['middle_name'] = text
            else:
                user_states[user_id]['form_data']['middle_name'] = ''
            
            user_states[user_id]['state'] = 'form_student_id'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞* (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        
        elif state == 'form_student_id':
            if not text.isdigit():
                bot.send_message(chat_id, "–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
                
            user_states[user_id]['form_data']['student_id'] = text
            user_states[user_id]['state'] = 'form_group'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ò–±-1 –∏–ª–∏ 2-–ü–ú–ò–±-1):")
        
        elif state == 'form_group':
            if not re.fullmatch(r'^(\d?-?[–ê-–Ø–Å–∞-—è—ë]+-\d+)$', text):
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü–ò–±-1' –∏–ª–∏ '2-–ü–ú–ò–±-1':")
                return
                
            user_states[user_id]['form_data']['group'] = text
            user_states[user_id]['state'] = 'form_teacher'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è* (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á' –∏–ª–∏ '–∏–≤–∞–Ω–æ–≤ –∏–≤–∞–Ω –∏–≤–∞–Ω–æ–≤–∏—á'):")
        
        elif state == 'form_teacher':
            text = ' '.join(word.capitalize() for word in text.lower().split())
            
            if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$', text):
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á':")
                return
                
            user_states[user_id]['form_data']['teacher'] = text
            user_states[user_id]['state'] = 'form_activity'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è*:")
        
        elif state == 'form_activity':
            if len(text) < 3:
                bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
                
            user_states[user_id]['form_data']['activity'] = text
            user_states[user_id]['state'] = 'form_event_status'
            
            markup = types.InlineKeyboardMarkup()
            for status in EVENT_STATUSES:
                markup.add(types.InlineKeyboardButton(status, callback_data=f"status_{status}"))
            
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*:", reply_markup=markup)
        
        elif state == 'form_event_date':
            try:
                date = datetime.strptime(text, '%d.%m.%Y').date()
                today = datetime.now().date()
                if date > today:
                    bot.send_message(chat_id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                    return
                
                user_states[user_id]['form_data']['event_date'] = text
                user_states[user_id]['state'] = 'form_file'
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —É—á–∞—Å—Ç–∏–µ* (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):")
            except ValueError:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        
        elif state == 'form_file_comment':
            user_states[user_id]['form_data']['file_comment'] = text if text != '-' else ''
            
            form_data = user_states[user_id]['form_data']
            form_data['user_id'] = user_id
            forms[user_id] = form_data
            save_data(forms, FORMS_FILE)
            
            del user_states[user_id]
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_form = types.KeyboardButton('üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
            btn_profile = types.KeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
            btn_admin = types.KeyboardButton('üîí –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            markup.add(btn_form, btn_profile, btn_admin)
            
            bot.send_message(chat_id, "–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=markup)
    
    elif text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É':
        user_states[user_id] = {
            'state': 'form_last_name',
            'username': users.get(user_id, {}).get('username', 'no_username')
        }
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é* (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):")
    
    elif text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        if user_id in admins:
            profile_info = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):\n–§–ò–û: {admins[user_id]['fio']}\n–õ–æ–≥–∏–Ω: {admins[user_id]['login']}\nUsername: {admins[user_id]['username']}"
        elif user_id in users:
            profile_info = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–õ–æ–≥–∏–Ω: {users[user_id]['login']}\nUsername: {users[user_id].get('username', 'no_username')}"
        else:
            profile_info = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        bot.send_message(chat_id, profile_info)
    
    elif text == 'üîí –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        if user_id in admins:
            bot.send_message(chat_id, "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        else:
            user_states[user_id] = {
                'state': 'admin_fio',
                'username': users.get(user_id, {}).get('username', 'no_username')
            }
            bot.send_message(chat_id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'):")
    
    elif text == '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' and user_id in admins:
        bot.send_message(chat_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    
    if user_id in user_states and user_states[user_id]['state'] == 'form_event_status':
        if call.data.startswith('status_'):
            status = call.data[7:]
            
            user_states[user_id]['form_data']['event_status'] = status
            user_states[user_id]['state'] = 'form_event_date'
            
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è* (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    
    elif call.data.startswith('approve_admin_'):
        user_id_to_approve = call.data[14:]
        if user_id_to_approve in pending_admins:
            admins[user_id_to_approve] = pending_admins[user_id_to_approve]
            save_data(admins, ADMINS_FILE)
            
            del pending_admins[user_id_to_approve]
            save_data(pending_admins, PENDING_ADMINS_FILE)
            
            bot.send_message(user_id_to_approve, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
            
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_approve} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    
    elif call.data.startswith('reject_admin_'):
        user_id_to_reject = call.data[13:]
        if user_id_to_reject in pending_admins:
            del pending_admins[user_id_to_reject]
            save_data(pending_admins, PENDING_ADMINS_FILE)
            
            bot.send_message(user_id_to_reject, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_reject} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['document', 'photo'])
def handle_file(message):
    user_id = str(message.from_user.id)
    
    if user_id in user_states and user_states[user_id]['state'] == 'form_file':
        chat_id = message.chat.id
        
        try:
            if message.content_type == 'document':
                file_info = bot.get_file(message.document.file_id)
                file_name = message.document.file_name
            else:
                file_info = bot.get_file(message.photo[-1].file_id)
                file_name = f"photo_{file_info.file_id}.jpg"
            
            user_states[user_id]['form_data']['file_id'] = file_info.file_id
            user_states[user_id]['form_data']['file_name'] = file_name
            
            user_states[user_id]['state'] = 'form_file_comment'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç):")
        
        except Exception as e:
            bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    for filename in [USERS_FILE, FORMS_FILE, ADMINS_FILE, PENDING_ADMINS_FILE]:
        if not os.path.exists(filename):
            save_data({}, filename)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)